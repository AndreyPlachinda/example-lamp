# create and claim a persistent volume for our pod
# this works because we enabled cloud-provider=aws
# so it can create a disk for itself

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
#    volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# deploy the mysql container

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      run: mysql
  template:
    metadata:
      labels:
        run: mysql
    spec:
      # deploying MySQL from the default Docker Hub image
      containers:
      - image: mysql
        name: mysql
        resources:
          requests:
            cpu: 1
            memory: 2Gi
        env:
          #replace with a proper secret handling
          #add another user?
          - name: MYSQL_ROOT_PASSWORD
            value: starbuck
        livenessProbe:
          tcpSocket:
            port: 3306
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          subPath: data
          name: database
      volumes:
      - name: database
        configMap:
        persistentVolumeClaim:
          claimName: database

---
# expose this on mysql.svc.default.cluster to the cluster

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
    protocol: TCP
  selector:
    run: mysql