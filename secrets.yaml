# You can generate the Secret object on your Kubernetes cluster directly, which is more secure
# Use "kubectl create secret generic ..." and provide keys and values
# Or you can generate the encoded values manually and add them to a file like this one
# See https://kubernetes.io/docs/concepts/configuration/secret/#creating-a-secret-using-kubectl-create-secret

# Secrets in this file are referenced throughout our application as environment variables

# The plain text values in the comments are included for the demo
# Do not include the plain text values in a production environment

apiVersion: v1
# https://kubernetes.io/docs/concepts/configuration/secret/
kind: Secret
# Other Kubernetes objects in the cluster can reference values from our Secret
# using name: mysql-credentials and key: <somekey>, like key: user
metadata:
  name: mysql-credentials
type: Opaque
data:
  # Encode secrets exactly like this from your command line
  # if you do something else, you will run into errors with newlines
  # root password for MySQL
  # the actual password is starbuck
  # echo -n starbuck | base64
  rootpw: c3RhcmJ1Y2s=
  # user for MySQL
  # the actual username is phpuser
  # echo -n phpuser | base64
  user: cGhwdXNlcg==
  # password for the second MySQL user
  # the actual password is userpw
  # echo -n userpw | base64
  password: dXNlcnB3